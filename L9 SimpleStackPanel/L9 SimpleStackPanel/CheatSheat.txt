UWP Cheat Seat

UWP-04 - What is XAML?
==================================================================
XAML - XML Syntax, create instances of Classes that define the UI.
   Similar to HTML
   Compare XAML to C# procedural code, XAML more efficeitn for UI layout.

UWP-05 - Understanding Type Converts
========================================
Type Converts - Convert literal string in XAML into enumerations, instacnes of classes, etc.

UWP-06 -Understanding Default Properties, Complex Peoperties and the Property Element Syntax
==========================================================================================================
Default Property ... Ex. sets Content Property:
<Button>Click Me</Button>

Complex Properties - Break otu a property into its own element syntax:


     <Button Name="ClickMeButton"
            Content="ClickMe"
            HorizontalAlignment="Left"
            Margin="20,20,0,0"
            VerticalAlignment="Top"
            Click="ClickMeButton_Click"
            Width="200"
            Height="100" >
            <!-- Propery Element Syntax, define complex property values vs simple type converter-->
        <Button.Background>
            <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                <GradientStop Color="Black" Offset="0"/>
                <GradientStop Color="Red" Offset="1"/>
            </LinearGradientBrush>
        </Button.Background>
	</Button>

	-- lots is auto-inferred by intelegent XAML parser in VS designer

UWP - 07 - Understanding XAML Schemas and Namespace Declarations
==========================================================================================================
Don't touch the schema stuff - it's necessary!

Schemas define rules for XAML, for UWP, for designer support, etc.

Namespaces till XAML paser where to find the defintiion / ruels for a given elmenent in XAML, is URI (Uniform Resource Indicator)
does not have to be actual valid URL to schema location....  Actual value for many built into the devloper tools, based on the unique URI,
which is standard for lots of speciality XML, although some are valid URLS that point to an actual XSD file.


UWP - 08 - XAML Layout with Grids
==========================================================================================================
Layout controls don't have a content propery....
they have a Children propert of type UIElementCollection.
By embedding any control insdie of a layout control, 
you are implicitly calling the Add method of the Children collection property.

Grid:
  <Grid Background="Black">
	<Grid.RowDefinitions>
		<RowDefinition Height="*"/>
		<RowDefinition Height="*"/>
		<RowDefinition Height="*"/>
	</Grid.RowDefinitions>
	<Grid.ColumnDefinitions>
		<ColumnDefiintion Width="*"/>
		<ColumnDefiintion Width="*"/>
		<ColumnDefiintion Width="*"/>
	</Grid.ColumnDefinitions>
  </Grid>

  Sizes expressed in terms of:

  Explict pixels - 100 (generally bad idea due to different form factors...)

  Auto -- Use the largest value of elements it contains to define the width/height

  * (Star Sizing) - Utilize all the available space

  1* - Of all available space, give me 1 "share"
  2* - Of all availabel space, give me 2 "shares"
  3* - Of all available space, give me 3 "shares"

  6 total shares (1 + 2  + 3) ... 3* would be 50% (3/6 == 1/2) of the availabel width / height.


Attached properties, Grid.Row is not on component....
...
	...
	<Button Grid.Row = "1" />
</Grid>

- When refereenceing Rows and Columns ... 0-based
- There's always one default implicit cell: Row 0, Column 0
- If not specified, element will be in the default cell


UWP - 09 - XAML Layour with StackPanel

<StackPanel>
	<TextBlock>Top</TextBlock>
	<TextBlock>Bottom</TextBlock>
</StackPanel>

- Verical Orieintation by default.
Left-to-right flow by default when Horizontal orientation.
Most layourws will combine multple layour contrls.
Grid will overlap controls. StackPanel will stack them.


